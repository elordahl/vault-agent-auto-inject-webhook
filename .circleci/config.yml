version: 2.1

orbs:
  snyk: snyk/snyk@0.0.8

jobs:
  build:
    machine:
        enabled: true
        image: circleci/classic:201808-01
    environment:
      GOLANG_VERSION: 1.12.10
      NOTARY_VERSION: 0.6.1
      GOPATH: /home/circleci/go
      GO111MODULE: "on"
    working_directory: /home/circleci/go/src/github.com/patoarvizu/vault-agent-auto-inject-webhook
    steps:
      - checkout
      - restore_cache:
          keys:
            - vault-agent-auto-inject-webhook-golang-cache-{{ checksum "go.sum" }}
      - run:
          name: Install golang
          command: |
            sudo rm -rf /usr/local/go
            curl -Lo go.linux-amd64.tar.gz "https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz"
            sudo tar -C /usr/local -xzf go.linux-amd64.tar.gz
            mkdir -p ${HOME}/go/bin
            echo 'export PATH="$GOPATH/bin:$PATH"' >> "${BASH_ENV}"
      - run:
          name: Install kubectl
          command: |
            curl -Lo kubectl "https://storage.googleapis.com/kubernetes-release/release/v1.12.0/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            mkdir -p "${HOME}/.kube"
            touch "${HOME}/.kube/config"
      - run:
          name: Install k3d
          command: |
            wget -q -O - https://raw.githubusercontent.com/rancher/k3d/v1.3.1/install.sh | bash
      - run:
          name: Build image
          command: |
            go mod vendor
            docker build -t patoarvizu/vault-agent-auto-inject-webhook:latest .
      - run:
          name: Run tests
          command: |
            k3d create --image rancher/k3s:v1.0.0
            sleep 20
            export KUBECONFIG="$(k3d get-kubeconfig --name=k3s-default)"
            k3d import-images patoarvizu/vault-agent-auto-inject-webhook:latest
            kubectl apply -f test/cert-manager.yaml --validate=false
            while [ "$(kubectl -n cert-manager get deployment cert-manager-webhook -o jsonpath={.status.availableReplicas})" != "1" ]; do
              echo "cert-manager Deployment not ready yet"
              sleep 3
            done
            while [ $(kubectl get apiservices v1beta1.webhook.cert-manager.io -o json | jq -r '[.status.conditions[] | select (.type == "Available" and .status == "True")] | length') != "1" ]; do
              echo "cert-manager APIService not ready yet"
              sleep 3
            done
            kubectl apply -f test/cluster-issuer.yaml
            kubectl apply -f test/webhook.yaml
            while [ "$(kubectl -n vault get deployment vault-agent-auto-inject-webhook -o jsonpath={.status.readyReplicas})" != "1" ]; do
              echo "vault-agent-auto-inject-webhook Deployment not ready yet"
              sleep 3
            done
            go test github.com/patoarvizu/vault-agent-auto-inject-webhook/cmd -v
      - run:
          name: Install notary
          command: |
            curl -L https://github.com/theupdateframework/notary/releases/download/v${NOTARY_VERSION}/notary-Linux-amd64 -o notary
            chmod +x notary
            sudo mv notary /usr/local/bin
      - snyk/scan:
          docker-image-name: patoarvizu/vault-agent-auto-inject-webhook:latest
          fail-on-issues: true
          project: patoarvizu/vault-agent-auto-inject-webhook
          severity-threshold: low
      - run:
          name: Build webhook
          command: |
            docker login --username $DOCKER_HUB_USER --password $DOCKER_HUB_ACCESS_TOKEN
            echo $ENCODED_NOTARY_ROLE_KEY | base64 -d > ${HOME}/vault-agent-auto-inject-webhook-circleci.key
            export NOTARY_DELEGATION_PASSPHRASE=$NOTARY_ROLE_PASSPHRASE
            notary -s https://notary.docker.io -d ~/.docker/trust key import ${HOME}/vault-agent-auto-inject-webhook-circleci.key --role vault-agent-auto-inject-webhook-circleci
            export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$NOTARY_DELEGATION_PASSPHRASE
            DOCKER_BUILD_ARGS="--build-arg GIT_COMMIT=$CIRCLE_SHA1 --build-arg GIT_TAG=$CIRCLE_TAG --build-arg COMMIT_TIMESTAMP=$(git log -1 --format=%at) --build-arg AUTHOR_EMAIL=$(git log -1 --format=%ae) --build-arg SIGNATURE_KEY=$(git log -1 --format=%GK)"
            docker build $DOCKER_BUILD_ARGS -t patoarvizu/vault-agent-auto-inject-webhook:$CIRCLE_SHA1 .
            export DOCKER_CONTENT_TRUST=1
            VERSION=${CIRCLE_TAG:-latest}
            docker tag patoarvizu/vault-agent-auto-inject-webhook:$CIRCLE_SHA1 patoarvizu/vault-agent-auto-inject-webhook:latest
            docker tag patoarvizu/vault-agent-auto-inject-webhook:$CIRCLE_SHA1 patoarvizu/vault-agent-auto-inject-webhook:$VERSION
            docker push patoarvizu/vault-agent-auto-inject-webhook:$CIRCLE_SHA1
            docker push patoarvizu/vault-agent-auto-inject-webhook:$VERSION
            docker push patoarvizu/vault-agent-auto-inject-webhook:latest
      - save_cache:
          key: vault-agent-auto-inject-webhook-golang-cache-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/go/pkg/mod/cache

workflows:
  version: 2
  build-webhook:
    jobs:
      - build:
          context: authentication-tokens
          filters:
            tags:
              only: /^v\d+\.\d+.\d+$/